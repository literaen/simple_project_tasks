// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/literaen/simple_project/pkg/postgres"
	"github.com/literaen/simple_project/pkg/redis"
	"github.com/literaen/simple_project/tasks/internal/config"
	"github.com/literaen/simple_project/tasks/internal/grpc/client"
	"github.com/literaen/simple_project/tasks/internal/grpc/handler"
	"github.com/literaen/simple_project/tasks/internal/grpc/server"
	"github.com/literaen/simple_project/tasks/internal/kafka/consumer"
	"github.com/literaen/simple_project/tasks/internal/oapi/handler"
	"github.com/literaen/simple_project/tasks/internal/tasks"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	configConfig := config.LoadEnv()
	db_CREDS := config.ProvideDBCreds(configConfig)
	gdb, err := postgres.NewGDB(db_CREDS)
	if err != nil {
		return nil, err
	}
	redis_CREDS := config.ProvideRedisCreds(configConfig)
	rdb := redis.NewRDB(redis_CREDS)
	taskRepository := tasks.NewTaskRepository(gdb, rdb)
	userGRPCClient := grpcclients.NewUserGRPCClient(configConfig)
	taskService := tasks.NewTaskService(taskRepository, userGRPCClient)
	taskHandler := oapihandler.NewTaskHandler(taskService)
	grpchandlerTaskHandler := grpchandler.NewTaskHandler(taskService)
	taskGRPCServer := grpcserver.NewTaskGRPCServer(configConfig, grpchandlerTaskHandler)
	app := newApp(configConfig, gdb, taskHandler, taskService, taskGRPCServer, grpchandlerTaskHandler)
	return app, nil
}

// wire.go:

type App struct {
	Config          *config.Config
	TaskOAPIHandler *oapihandler.TaskHandler
	TaskGRPCHandler *grpchandler.TaskHandler
	TaskGRPCServer  *grpcserver.TaskGRPCServer
}

func newApp(config2 *config.Config,
	gdb *postgres.GDB,
	oapiTaskHandler *oapihandler.TaskHandler,
	taskService *tasks.TaskService,
	taskGRPCServer *grpcserver.TaskGRPCServer,
	grpcTaskHandler *grpchandler.TaskHandler,
) *App {
	tasks.Migrate(gdb.DB)
	consumer2 := consumer.NewUserEventConsumer(
		taskService, config2.
			KAFKA_BROKERS, "users.events",
		"tasks.service",
	)

	go consumer2.Start(context.TODO())

	return &App{
		Config:          config2,
		TaskOAPIHandler: oapiTaskHandler,
		TaskGRPCHandler: grpcTaskHandler,
		TaskGRPCServer:  taskGRPCServer,
	}
}
